{"ast":null,"code":"import { isTag, hasChildren } from \"domhandler\";\n/**\n * Search a node and its children for nodes passing a test function. If `node` is not an array, it will be wrapped in one.\n *\n * @category Querying\n * @param test Function to test nodes on.\n * @param node Node to search. Will be included in the result set if it matches.\n * @param recurse Also consider child nodes.\n * @param limit Maximum number of nodes to return.\n * @returns All nodes passing `test`.\n */\nexport function filter(test, node, recurse = true, limit = Infinity) {\n  return find(test, Array.isArray(node) ? node : [node], recurse, limit);\n}\n/**\n * Search an array of nodes and their children for nodes passing a test function.\n *\n * @category Querying\n * @param test Function to test nodes on.\n * @param nodes Array of nodes to search.\n * @param recurse Also consider child nodes.\n * @param limit Maximum number of nodes to return.\n * @returns All nodes passing `test`.\n */\nexport function find(test, nodes, recurse, limit) {\n  const result = [];\n  /** Stack of the arrays we are looking at. */\n  const nodeStack = [Array.isArray(nodes) ? nodes : [nodes]];\n  /** Stack of the indices within the arrays. */\n  const indexStack = [0];\n  for (;;) {\n    // First, check if the current array has any more elements to look at.\n    if (indexStack[0] >= nodeStack[0].length) {\n      // If we have no more arrays to look at, we are done.\n      if (indexStack.length === 1) {\n        return result;\n      }\n      // Otherwise, remove the current array from the stack.\n      nodeStack.shift();\n      indexStack.shift();\n      // Loop back to the start to continue with the next array.\n      continue;\n    }\n    const elem = nodeStack[0][indexStack[0]++];\n    if (test(elem)) {\n      result.push(elem);\n      if (--limit <= 0) return result;\n    }\n    if (recurse && hasChildren(elem) && elem.children.length > 0) {\n      /*\n       * Add the children to the stack. We are depth-first, so this is\n       * the next array we look at.\n       */\n      indexStack.unshift(0);\n      nodeStack.unshift(elem.children);\n    }\n  }\n}\n/**\n * Finds the first element inside of an array that matches a test function. This is an alias for `Array.prototype.find`.\n *\n * @category Querying\n * @param test Function to test nodes on.\n * @param nodes Array of nodes to search.\n * @returns The first node in the array that passes `test`.\n * @deprecated Use `Array.prototype.find` directly.\n */\nexport function findOneChild(test, nodes) {\n  return nodes.find(test);\n}\n/**\n * Finds one element in a tree that passes a test.\n *\n * @category Querying\n * @param test Function to test nodes on.\n * @param nodes Node or array of nodes to search.\n * @param recurse Also consider child nodes.\n * @returns The first node that passes `test`.\n */\nexport function findOne(test, nodes, recurse = true) {\n  const searchedNodes = Array.isArray(nodes) ? nodes : [nodes];\n  for (let i = 0; i < searchedNodes.length; i++) {\n    const node = searchedNodes[i];\n    if (isTag(node) && test(node)) {\n      return node;\n    }\n    if (recurse && hasChildren(node) && node.children.length > 0) {\n      const found = findOne(test, node.children, true);\n      if (found) return found;\n    }\n  }\n  return null;\n}\n/**\n * Checks if a tree of nodes contains at least one node passing a test.\n *\n * @category Querying\n * @param test Function to test nodes on.\n * @param nodes Array of nodes to search.\n * @returns Whether a tree of nodes contains at least one node passing the test.\n */\nexport function existsOne(test, nodes) {\n  return (Array.isArray(nodes) ? nodes : [nodes]).some(node => isTag(node) && test(node) || hasChildren(node) && existsOne(test, node.children));\n}\n/**\n * Search an array of nodes and their children for elements passing a test function.\n *\n * Same as `find`, but limited to elements and with less options, leading to reduced complexity.\n *\n * @category Querying\n * @param test Function to test nodes on.\n * @param nodes Array of nodes to search.\n * @returns All nodes passing `test`.\n */\nexport function findAll(test, nodes) {\n  const result = [];\n  const nodeStack = [Array.isArray(nodes) ? nodes : [nodes]];\n  const indexStack = [0];\n  for (;;) {\n    if (indexStack[0] >= nodeStack[0].length) {\n      if (nodeStack.length === 1) {\n        return result;\n      }\n      // Otherwise, remove the current array from the stack.\n      nodeStack.shift();\n      indexStack.shift();\n      // Loop back to the start to continue with the next array.\n      continue;\n    }\n    const elem = nodeStack[0][indexStack[0]++];\n    if (isTag(elem) && test(elem)) result.push(elem);\n    if (hasChildren(elem) && elem.children.length > 0) {\n      indexStack.unshift(0);\n      nodeStack.unshift(elem.children);\n    }\n  }\n}","map":{"version":3,"names":["isTag","hasChildren","filter","test","node","recurse","limit","Infinity","find","Array","isArray","nodes","result","nodeStack","indexStack","length","shift","elem","push","children","unshift","findOneChild","findOne","searchedNodes","i","found","existsOne","some","findAll"],"sources":["https://raw.githubusercontent.com/fb55/domutils/0ab8bcf1ecfc70dfc93291a4cb2496578ac25e9c/src/querying.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}