{"ast":null,"code":"import { Parser } from \"./Parser.js\";\nexport { Parser } from \"./Parser.js\";\nimport { DomHandler } from \"domhandler\";\nexport { DomHandler,\n// Old name for DomHandler\nDomHandler as DefaultHandler } from \"domhandler\";\n// Helper methods\n/**\n * Parses the data, returns the resulting document.\n *\n * @param data The data that should be parsed.\n * @param options Optional options for the parser and DOM builder.\n */\nexport function parseDocument(data, options) {\n  const handler = new DomHandler(undefined, options);\n  new Parser(handler, options).end(data);\n  return handler.root;\n}\n/**\n * Parses data, returns an array of the root nodes.\n *\n * Note that the root nodes still have a `Document` node as their parent.\n * Use `parseDocument` to get the `Document` node instead.\n *\n * @param data The data that should be parsed.\n * @param options Optional options for the parser and DOM builder.\n * @deprecated Use `parseDocument` instead.\n */\nexport function parseDOM(data, options) {\n  return parseDocument(data, options).children;\n}\n/**\n * Creates a parser instance, with an attached DOM handler.\n *\n * @param callback A callback that will be called once parsing has been completed.\n * @param options Optional options for the parser and DOM builder.\n * @param elementCallback An optional callback that will be called every time a tag has been completed inside of the DOM.\n */\nexport function createDomStream(callback, options, elementCallback) {\n  const handler = new DomHandler(callback, options, elementCallback);\n  return new Parser(handler, options);\n}\nexport { default as Tokenizer } from \"./Tokenizer.js\";\n/*\n * All of the following exports exist for backwards-compatibility.\n * They should probably be removed eventually.\n */\nimport * as _ElementType from \"domelementtype\";\nexport { _ElementType as ElementType };\nimport { getFeed } from \"domutils\";\nexport { getFeed } from \"domutils\";\nconst parseFeedDefaultOptions = {\n  xmlMode: true\n};\n/**\n * Parse a feed.\n *\n * @param feed The feed that should be parsed, as a string.\n * @param options Optionally, options for parsing. When using this, you should set `xmlMode` to `true`.\n */\nexport function parseFeed(feed, options = parseFeedDefaultOptions) {\n  return getFeed(parseDOM(feed, options));\n}\nimport * as _DomUtils from \"domutils\";\nexport { _DomUtils as DomUtils };","map":{"version":3,"names":["Parser","DomHandler","DefaultHandler","parseDocument","data","options","handler","undefined","end","root","parseDOM","children","createDomStream","callback","elementCallback","default","Tokenizer","_ElementType","ElementType","getFeed","parseFeedDefaultOptions","xmlMode","parseFeed","feed","_DomUtils","DomUtils"],"sources":["https://raw.githubusercontent.com/fb55/htmlparser2/c123610e003a1eaebc61febed01cabb6e41eb658/src/index.ts"],"sourcesContent":[null],"mappings":"AAAA,SAASA,MAAM,QAAuB,aAAa;AACnD,SAASA,MAAM,QAA4B,aAAa;AAExD,SACIC,UAAU,QAKP,YAAY;AAEnB,SACIA,UAAU;AACV;AACAA,UAAU,IAAIC,cAAc,QAEzB,YAAY;AAInB;AAEA;;;;;;AAMA,OAAM,SAAUC,aAAaA,CAACC,IAAY,EAAEC,OAAiB;EACzD,MAAMC,OAAO,GAAG,IAAIL,UAAU,CAACM,SAAS,EAAEF,OAAO,CAAC;EAClD,IAAIL,MAAM,CAACM,OAAO,EAAED,OAAO,CAAC,CAACG,GAAG,CAACJ,IAAI,CAAC;EACtC,OAAOE,OAAO,CAACG,IAAI;AACvB;AACA;;;;;;;;;;AAUA,OAAM,SAAUC,QAAQA,CAACN,IAAY,EAAEC,OAAiB;EACpD,OAAOF,aAAa,CAACC,IAAI,EAAEC,OAAO,CAAC,CAACM,QAAQ;AAChD;AACA;;;;;;;AAOA,OAAM,SAAUC,eAAeA,CAC3BC,QAAyD,EACzDR,OAAiB,EACjBS,eAA4C;EAE5C,MAAMR,OAAO,GAAG,IAAIL,UAAU,CAACY,QAAQ,EAAER,OAAO,EAAES,eAAe,CAAC;EAClE,OAAO,IAAId,MAAM,CAACM,OAAO,EAAED,OAAO,CAAC;AACvC;AAEA,SACIU,OAAO,IAAIC,SAAS,QAEjB,gBAAgB;AAEvB;;;;AAAA,YAAAC,YAAA,MAI6B,gBAAgB;AAAA,SAAAA,YAAA,IAAjCC,WAAW;AAEvB,SAASC,OAAO,QAAc,UAAU;AAExC,SAASA,OAAO,QAAQ,UAAU;AAElC,MAAMC,uBAAuB,GAAG;EAAEC,OAAO,EAAE;AAAI,CAAE;AAEjD;;;;;;AAMA,OAAM,SAAUC,SAASA,CACrBC,IAAY,EACZlB,OAAA,GAAmBe,uBAAuB;EAE1C,OAAOD,OAAO,CAACT,QAAQ,CAACa,IAAI,EAAElB,OAAO,CAAC,CAAC;AAC3C;AAAC,YAAAmB,SAAA,MAEyB,UAAU;AAAA,SAAAA,SAAA,IAAxBC,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module"}